"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var lib_storage_1 = require("@aws-sdk/lib-storage");
var s3_request_presigner_1 = require("@aws-sdk/s3-request-presigner");
var client_s3_1 = require("@aws-sdk/client-s3");
var path_1 = require("path");
var medusa_1 = require("@medusajs/medusa");
var stream_1 = __importDefault(require("stream"));
var S3Service = /** @class */ (function (_super) {
    __extends(S3Service, _super);
    function S3Service(_a, options) {
        var logger = _a.logger;
        var _this = this;
        var _b, _c;
        _this = _super.call(this, arguments[0], options) || this;
        _this.prefix_ = options.prefix ? "".concat(options.prefix, "/") : '';
        _this.bucket_ = options.bucket;
        _this.s3Url_ = options.s3_url;
        _this.accessKeyId_ = options.access_key_id;
        _this.secretAccessKey_ = options.secret_access_key;
        _this.region_ = options.region;
        _this.downloadFileDuration_ = options.download_file_duration;
        _this.awsConfigObject_ = (_b = options.aws_config_object) !== null && _b !== void 0 ? _b : {};
        _this.cacheControl_ = (_c = options.cache_control) !== null && _c !== void 0 ? _c : "max-age=31536000";
        _this.logger_ = logger;
        _this.client_ = _this.getClient();
        return _this;
    }
    S3Service.prototype.getClient = function (overwriteConfig) {
        if (overwriteConfig === void 0) { overwriteConfig = {}; }
        var config = __assign(__assign(__assign({ credentials: {
                accessKeyId: this.accessKeyId_,
                secretAccessKey: this.secretAccessKey_,
            }, region: this.region_ }, this.awsConfigObject_), { signatureVersion: 'v4' }), overwriteConfig);
        return new client_s3_1.S3Client(config);
    };
    S3Service.prototype.upload = function (file) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.uploadFile(file)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    S3Service.prototype.uploadProtected = function (file) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.uploadFile(file, { acl: "private" })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    S3Service.prototype.uploadFile = function (file, options) {
        var _a;
        if (options === void 0) { options = {
            isProtected: false,
            acl: undefined,
        }; }
        return __awaiter(this, void 0, void 0, function () {
            var parsedFilename, fileKey, command, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        parsedFilename = (0, path_1.parse)(file.originalname);
                        fileKey = "".concat(this.prefix_).concat(parsedFilename.name, "-").concat(Date.now()).concat(parsedFilename.ext);
                        command = new client_s3_1.PutObjectCommand({
                            ACL: (_a = options.acl) !== null && _a !== void 0 ? _a : (options.isProtected ? "private" : "public-read"),
                            Bucket: this.bucket_,
                            Body: fs_1.default.createReadStream(file.path),
                            Key: fileKey,
                            ContentType: file.mimetype,
                            CacheControl: this.cacheControl_
                        });
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.client_.send(command)];
                    case 2:
                        _b.sent();
                        return [2 /*return*/, {
                                url: "".concat(this.s3Url_, "/").concat(fileKey),
                                key: fileKey,
                            }];
                    case 3:
                        e_1 = _b.sent();
                        this.logger_.error(e_1);
                        throw e_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    S3Service.prototype.delete = function (file) {
        return __awaiter(this, void 0, void 0, function () {
            var command, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        command = new client_s3_1.DeleteObjectCommand({
                            Bucket: this.bucket_,
                            Key: "".concat(file.file_key),
                        });
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.client_.send(command)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_2 = _a.sent();
                        this.logger_.error(e_2);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    S3Service.prototype.getUploadStreamDescriptor = function (fileData) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var pass, isPrivate, fileKey, params, uploadJob;
            return __generator(this, function (_b) {
                pass = new stream_1.default.PassThrough();
                isPrivate = (_a = fileData.isPrivate) !== null && _a !== void 0 ? _a : true // default to private
                ;
                fileKey = "".concat(this.prefix_).concat(fileData.name, ".").concat(fileData.ext);
                params = {
                    ACL: isPrivate ? "private" : "public-read",
                    Bucket: this.bucket_,
                    Body: pass,
                    Key: fileKey,
                    ContentType: fileData.contentType,
                };
                uploadJob = new lib_storage_1.Upload({
                    client: this.client_,
                    params: params
                });
                return [2 /*return*/, {
                        writeStream: pass,
                        promise: uploadJob.done(),
                        url: "".concat(this.s3Url_, "/").concat(fileKey),
                        fileKey: fileKey,
                    }];
            });
        });
    };
    S3Service.prototype.getDownloadStream = function (fileData) {
        return __awaiter(this, void 0, void 0, function () {
            var command, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        command = new client_s3_1.GetObjectCommand({
                            Bucket: this.bucket_,
                            Key: "".concat(fileData.fileKey),
                        });
                        return [4 /*yield*/, this.client_.send(command)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.Body];
                }
            });
        });
    };
    S3Service.prototype.getPresignedDownloadUrl = function (fileData) {
        return __awaiter(this, void 0, void 0, function () {
            var command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        command = new client_s3_1.GetObjectCommand({
                            Bucket: this.bucket_,
                            Key: "".concat(fileData.fileKey),
                        });
                        return [4 /*yield*/, (0, s3_request_presigner_1.getSignedUrl)(this.client_, command, { expiresIn: this.downloadFileDuration_ })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return S3Service;
}(medusa_1.AbstractFileService));
exports.default = S3Service;
//# sourceMappingURL=s3.js.map